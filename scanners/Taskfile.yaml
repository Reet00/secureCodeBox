# SPDX-FileCopyrightText: the secureCodeBox authors
#
# SPDX-License-Identifier: Apache-2.0

version: "3"

includes:
  demo-targets:
    taskfile: ../demo-targets/Taskfile.yaml
    internal: true
  core:
    taskfile: ../Taskfile.yaml
    internal: true

vars:
  # if the scanner uses a custom scanner container image which needs to be built. Usually false as we prefer to reference the official scanner container images
  hasCustomScanner:
    sh: 'if [ -d "{{ .TASKFILE_DIR }}/{{ .scannerName }}/scanner/" ]; then echo "true"; else echo "false"; fi'
  parserUsesNpmDependencies:
    sh: 'if [ -f "{{ .TASKFILE_DIR }}/{{ .scannerName }}/parser/package.json" ]; then echo "true"; else echo "false"; fi'
  # addtional cli args to pass to the helm install command which installs the scanner into the testing environment
  additionalHelmInstallArgsForScanner: '{{ .additionalHelmInstallArgsForScanner | default "" }}'
env:
  IMG_TAG:
    sh: 'echo "sha-$(git rev-parse --short HEAD)"'

tasks:
  build:
    desc: Build the Docker image for the {{ .scannerName }} scanner
    status:
      - docker images | grep -q "docker.io/securecodebox/scanner-{{ .scannerName }}:${IMG_TAG}" || false
      - docker images | grep -q "docker.io/securecodebox/parser-{{ .scannerName }}:${IMG_TAG}" || false
    preconditions:
      - msg: "Docker is not running, please start Docker first"
        sh: "docker info >/dev/null 2>&1 || false"
    deps:
      - core:build-parser-sdk-image
    cmds:
      - |
        {{ if eq "true" .hasCustomScanner -}}
        echo "Building custom scanner image for {{ .scannerName }} with tag ${IMG_TAG}"
        docker build -t docker.io/securecodebox/scanner-{{ .scannerName }}:${IMG_TAG} \
          --build-arg=scannerVersion=$(yq eval .appVersion {{ .TASKFILE_DIR }}/{{ .scannerName }}/Chart.yaml) \
          --build-arg=baseImageTag=${IMG_TAG} \
          {{ .TASKFILE_DIR }}/{{ .scannerName }}/scanner/
        kind load docker-image --name testing-env docker.io/securecodebox/scanner-{{ .scannerName }}:${IMG_TAG}
        {{ else -}}
          echo "No custom scanner image defined, assuming scanner doen't need to be build"
        {{ end -}}
      - |
        echo "Building parser image for {{ .scannerName }} with tag ${IMG_TAG}"
        docker build -t docker.io/securecodebox/parser-{{ .scannerName }}:${IMG_TAG} \
          --build-arg=baseImageTag=${IMG_TAG} \
          {{ .TASKFILE_DIR }}/{{ .scannerName }}/parser/
        kind load docker-image --name testing-env docker.io/securecodebox/parser-{{ .scannerName }}:${IMG_TAG}
  predeploy:
    desc: Can be overwritten by the scanner to perform any pre-deployment steps
    cmds: []
    silent: true
  deploy:
    desc: Deploy the {{ .scannerName }} scanner to the testing environment
    status:
      - helm ls {{ .scannerName }} -n integration-tests | grep -q '{{ .scannerName }}' || false
    cmds:
      - task: core:prepare-testing-env
      - task: build
      - 'echo "Deploying {{ .scannerName }} to the testing environment"'
      - task: predeploy
      - |
        helm upgrade --install {{ .scannerName }} {{ .TASKFILE_DIR }}/{{ .scannerName }} --namespace integration-tests \
          {{ if eq "true" .hasCustomScanner -}}
          --set="scanner.image.tag=${IMG_TAG}" \
          --set="scanner.image.pullPolicy=Never" \
          {{ end -}}
          {{ if ne "" .additionalHelmInstallArgsForScanner -}}
          {{ .additionalHelmInstallArgsForScanner -}}
          {{ end -}}
          --set="parser.image.tag=${IMG_TAG}" \
          --set="parser.image.pullPolicy=Never" \
          --wait

  # test:setup tasks
  test:setup:parser-sdk:
    internal: true
    status:
      - "[ -d {{ .TASKFILE_DIR }}/../parser-sdk/nodejs/node_modules ] || false"
    cmds:
      - cd {{ .TASKFILE_DIR }}/../parser-sdk/nodejs/ && bun install
  test:setup:scanner-dir:
    internal: true
    status:
      - "[ -d {{ .TASKFILE_DIR }}/node_modules ] || false"
    cmds:
      - cd {{ .TASKFILE_DIR }}/ && bun install
  test:setup:test-helpers:
    internal: true
    status:
      - "[ -d {{ .TASKFILE_DIR }}/../tests/integration/node_modules ] || false"
    cmds:
      - cd {{ .TASKFILE_DIR }}/../tests/integration && bun install
  test:setup:parser-deps:
    internal: true
    status:
      - '{{ if eq "true" .parserUsesNpmDependencies -}}[ -d {{ .TASKFILE_DIR }}/{{ .scannerName }}/parser/node_modules ] || false{{ else -}}true{{ end -}}'
    cmds:
      - cd {{ .TASKFILE_DIR }}/{{ .scannerName }}/parser/ && bun install
  test:setup:
    cmds:
      - task: test:setup:parser-sdk
      - task: test:setup:scanner-dir
      - task: test:setup:test-helpers
      - task: test:setup:parser-deps

  test:unit:
    desc: Run unit tests for the {{ .scannerName }} scanner
    deps:
      - test:setup
    cmds:
      - |
        echo "Running integration tests for {{ .scannerName }}"
        bun test {{ .TASKFILE_DIR }}/{{ .scannerName }}/parser/
  test:integration:
    desc: Run integration tests for the {{ .scannerName }} scanner
    deps:
      - test:setup
      - deploy
    preconditions:
      - msg: "kind cluster is not running, run 'task prepare-testing-env' from project root dir first"
        sh: "kubectl config get-contexts | grep -q 'kind-testing-env' || false"
      - msg: "secureCodeBox operator is not deployed, run 'task prepare-testing-env' from project root dir first"
        sh: "kubectl get pods -n securecodebox-system | grep -q 'securecodebox-operator' || false"
      - msg: "{{ .scannerName }} scan type is not deployed, run 'task build deploy' from scanner dir first"
        sh: "helm -n integration-tests ls | grep -q '{{ .scannerName }}' || false"
    cmds:
      # Workaround for https://github.com/oven-sh/bun/issues/7332
      - 'echo "Forwarding the Kubernetes API to localhost"'
      - kubectl proxy >/dev/null 2>&1 &
      - sleep 1 # Wait a bit to ensure the proxy is up

      - defer: |
          # kill pid with command "kubectl proxy"
          echo "Killing kubectl proxy"
          pkill -f "kubectl proxy"

      - echo "Running integration tests for {{ .scannerName }}"
      - bun test {{ .TASKFILE_DIR }}/{{ .scannerName }}/integration-tests/
  test:helm:
    desc: Run helm tests for the {{ .scannerName }} scanner
    preconditions:
      - msg: "Helm unittest plugin is not installed, you need to install it first. See: https://github.com/helm-unittest/helm-unittest/"
        sh: "helm plugin list | grep -q 'unittest' || false"
    cmds:
      - helm unittest {{ .TASKFILE_DIR }}/{{ .scannerName }}
  test:
    desc: Run all tests for the {{ .scannerName }} scanner
    cmds:
      - task test:unit
      - task test:helm
      - task test:integration
